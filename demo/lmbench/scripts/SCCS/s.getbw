h52544
s 00000/00000/00260
d D 1.6 00/01/31 15:29:41 lm 7 6
c Change mode to -rwxrwxr-x
cC
cK06278
cO-rwxrwxr-x
e
s 00002/00001/00258
d D 1.5 97/10/31 18:00:01 lm 6 5
c New interface with results/Makefile
cC
cK38526
cZ-08:00
e
s 00005/00005/00254
d D 1.4 97/10/19 23:54:18 lm 5 4
c don'\''t know.
cK35601
e
s 00067/00017/00192
d D 1.3 97/07/12 18:09:16 lm 4 3
c new stuff for all the new bandwidths being generated.
c XXX - need to add mem latency.
cK36357
e
s 00101/00021/00108
d D 1.2 97/07/09 01:21:55 lm 3 2
c make it handle all the new stuff.
cK25128
e
s 00129/00000/00000
d D 1.1 97/06/14 21:14:10 lm 2 1
c Initial revision
cK39053
e
s 00000/00000/00000
d D 1.0 97/06/14 21:14:09 lm 1 0
cBlm@lm.bitmover.com|ChangeSet|20000131225335|47351|--LMBENCH--
cHlm.bitmover.com
cK03939
cPscripts/getbw
cR9d79bf4769c384ce
cV4
cX0x23
cZ-07:00
e
u
U
f e 0
f x 0x23
t
T
I 2

# Extract the bandwith information.
# Usage: getbw file file....
#
# Hacked into existence by Larry McVoy (lm@sun.com now lm@sgi.com).
# Copyright (c) 1994 Larry McVoy.  GPLed software.
# $Id$
eval 'exec perl -Ssw $0 "$@"'
	if 0;

I 3
#
# Default is file bandwidth which lists: mem read, file read (both),
# mmap read (both), bcopy.
#
# -mem turns off the file stuff but turns on rd, wr, rdwr, frd, fwr, 
# bcopy, bzero, cp, fcp.
#
E 3
foreach $file (@ARGV) {
D 6
	warn "$file\n";
E 6
	open(FD, $file);
D 4
	($f = $file) =~ s|.*/||;
	open(OUT, ">tmp/bw.$f");
E 4
I 4
	&cache;
	open(FD, $file);
	($f = $file) =~ s|/|-|;
	if ($mem || $all) {
I 6
		print "tmp/bwmem.$f\n";
E 6
		open(OUT, ">tmp/bwmem.$f");
	} else {
I 6
		print "tmp/bwfile.$f\n";
E 6
		open(OUT, ">tmp/bwfile.$f");
	}
E 4
D 5
	print OUT "\"%X Memory size \n\"%Y Bandwidth in MB/sec\n";
E 5
I 5
	print OUT "%X Memory size \n%Y Bandwidth in MB/sec\n";
E 5
	while (<FD>) {
		chop;
		if (/^\[lmbench/) {
			@_ = split;
			if ($_[3] eq "SunOS") {
				$_[3] .= "-$_[5]";
			}
			$uname = "@_";
		}
D 3
		if (/Mhz/) {
			$mhz = $_;
			@info = &getinfo($uname, $mhz);
			print OUT
			    "\"%T Memory bandwidth for $info[3] $info[$#info]Mhz\n";
E 3
I 3
		if (/^\d+.*Mhz/) {
			@_ = split;
			$mhz = $_[0];
			$tmp = &getinfo("$uname", $mhz);
D 4
			print OUT "\"%T Memory bandwidth for $tmp\n";
E 4
I 4
			if ($mem) {
D 5
				print OUT "\"%T Memory bandwidth for $tmp\n";
E 5
I 5
				print OUT "%T Memory bandwidth for $tmp\n";
E 5
			} else {
D 5
				print OUT "\"%T Reread bandwidth for $tmp\n";
E 5
I 5
				print OUT "%T Reread bandwidth for $tmp\n";
E 5
			}
E 4
E 3
		}
D 3
		if (/^"read bandwidth/) {
E 3
I 3
		if (/MHZ/) {
			@_ = split;
			$mhz = $_[1];
			chop($mhz) if $mhz =~ /]$/;
			$tmp = &getinfo("$uname", $mhz);
D 4
			print OUT "\"%T Memory bandwidth for $tmp\n";
E 4
I 4
			if ($mem) {
D 5
				print OUT "\"%T Memory bandwidth for $tmp\n";
E 5
I 5
				print OUT "%T Memory bandwidth for $tmp\n";
E 5
			} else {
D 5
				print OUT "\"%T Reread bandwidth for $tmp\n";
E 5
I 5
				print OUT "%T Reread bandwidth for $tmp\n";
E 5
			}
E 4
		}
D 4
		if (!$mem && /^"read bandwidth/) {
E 4
I 4
		if ((!$all && !$mem) && /^"read bandwidth/) {
E 4
E 3
			print OUT "\"File reread\n";
			while (<FD>) {
				last if /^\s*$/;
			    	print OUT;
			}
			print OUT "\n";
			next;
		}
D 3
		if (/^"Mmap read bandwidth/) {
E 3
I 3
D 4
		if (!$mem && /^"read open2close bandwidth/) {
E 4
I 4
		if ((!$all && !$mem) && /^"read open2close bandwidth/) {
E 4
			print OUT "\"File open2close reread\n";
			while (<FD>) {
				last if /^\s*$/;
			    	print OUT;
			}
			print OUT "\n";
			next;
		}
D 4
		if (!$mem && /^"Mmap read bandwidth/) {
E 4
I 4
		if ((!$all && !$mem) && /^"Mmap read bandwidth/) {
E 4
E 3
			print OUT "\"File mmap reread\n";
			while (<FD>) {
				last if /^\s*$/;
			    	print OUT;
			}
			print OUT "\n";
			next;
		}
D 3
		if (/^"libc bcopy aligned/) {
			print OUT "\"libc bcopy unaligned\n";
E 3
I 3
D 4
		if (!$mem && /^"Mmap read open2close bandwidth/) {
E 4
I 4
		if ((!$all && !$mem) && /^"Mmap read open2close bandwidth/) {
E 4
			print OUT "\"File mmap open2close reread\n";
E 3
			while (<FD>) {
				last if /^\s*$/;
			    	print OUT;
			}
			print OUT "\n";
			next;
		}
I 3
D 4
		if (0 && /^"libc bcopy aligned/) {
E 4
I 4
		if ($all && /^"libc bcopy aligned/) {
E 4
			print OUT "\"libc bcopy aligned\n";
			while (<FD>) {
				last if /^\s*$/;
			    	print OUT;
			}
			print OUT "\n";
			next;
		}
E 3
		if (/^"libc bcopy unaligned/) {
			print OUT "\"libc bcopy unaligned\n";
			while (<FD>) {
				last if /^\s*$/;
			    	print OUT;
			}
			print OUT "\n";
			next;
		}
D 3
		if (/^"unrolled bcopy aligned/) {
E 3
I 3
D 4
		if (0 && /^"unrolled bcopy aligned/) {
E 4
I 4
		if ($all && /^"unrolled bcopy aligned/) {
E 4
E 3
			print OUT "\"libc bcopy unaligned\n";
			while (<FD>) {
				last if /^\s*$/;
			    	print OUT;
			}
			print OUT "\n";
			next;
		}
D 3
		if (/^"unrolled bcopy unaligned/) {
			print OUT "\"libc bcopy unaligned\n";
E 3
I 3
D 4
		if ($mem && /^"unrolled bcopy unaligned/) {
E 4
I 4
		if (($all || $mem) && /^"unrolled bcopy unaligned/) {
E 4
			print OUT "\"unrolled bcopy unaligned\n";
E 3
			while (<FD>) {
				last if /^\s*$/;
			    	print OUT;
			}
			print OUT "\n";
			next;
		}
I 3
D 4
		if ($mem && /^"unrolled partial bcopy unaligned/) {
E 4
I 4
		if (($all || $mem) && /^"unrolled partial bcopy unaligned/) {
E 4
			print OUT "\"unrolled partial bcopy unaligned\n";
			while (<FD>) {
				last if /^\s*$/;
I 4
				@_ = split; next unless $_[0] > $cache;
E 4
			    	print OUT;
			}
			print OUT "\n";
			next;
		}
E 3
		if (/^Memory read bandwidth/) {
			print OUT "\"$_\n";
			while (<FD>) {
				last if /^\s*$/;
			    	print OUT;
			}
			print OUT "\n";
			next;
		}
D 3
		if (/^Memory write bandwidth/) {
E 3
I 3
D 4
		if ($mem && /^Memory partial read bandwidth/) {
E 4
I 4
		if (($all || $mem) && /^Memory partial read bandwidth/) {
E 4
E 3
			print OUT "\"$_\n";
			while (<FD>) {
				last if /^\s*$/;
I 4
				@_ = split; next unless $_[0] > $cache;
E 4
			    	print OUT;
			}
			print OUT "\n";
			next;
		}
I 3
D 4
		if ($mem && /^Memory partial read.write bandwidth/) {
E 4
I 4
		if (($all || $mem) && /^Memory partial read.write bandwidth/) {
E 4
			print OUT "\"$_\n";
			while (<FD>) {
				last if /^\s*$/;
I 4
				@_ = split; next unless $_[0] > $cache;
E 4
			    	print OUT;
			}
			print OUT "\n";
			next;
		}
D 4
		if ($mem && /^Memory partial write bandwidth/) {
E 4
I 4
		if (($all || $mem) && /^Memory partial write bandwidth/) {
E 4
			print OUT "\"$_\n";
			while (<FD>) {
				last if /^\s*$/;
I 4
				@_ = split; next unless $_[0] > $cache;
E 4
			    	print OUT;
			}
			print OUT "\n";
			next;
		}
D 4
		if ($mem && /^Memory write bandwidth/) {
E 4
I 4
		if (($all || $mem) && /^Memory write bandwidth/) {
E 4
			print OUT "\"$_\n";
			while (<FD>) {
				last if /^\s*$/;
			    	print OUT;
			}
			print OUT "\n";
			next;
		}
D 4
		if ($mem && /^Memory bzero bandwidth/) {
E 4
I 4
		if (($all || $mem) && /^Memory bzero bandwidth/) {
E 4
			print OUT "\"$_\n";
			while (<FD>) {
				last if /^\s*$/;
			    	print OUT;
			}
			print OUT "\n";
			next;
		}
E 3
	}
}

I 4
# Paw through the data and figure out how big the L1 cache is.
# We look at the memory read performance and look for cluster breaks
# at 4, 8, 16, 32, 64, 126, and 256k.
sub cache
{
	local($in) = 0;
	local($n, $sum, $avg) = (0,0,0);

	$cache = 0;
	while (<FD>) {
		if (/^Memory partial read bandwidth/) {
			$in = 1;
			next;
		}
		next unless $in;
		@_ = split;
		if ($n == 0) {
			$sum += $_[1];
			$n++;
			next;
		}
		$avg = $sum/$n;
		if ($_[1] < .75*$avg) {
			$cache = $last;
			return;
		}
		$last = $_[0];
		$sum += $_[1];
		$n++;
	}
}

E 4
# Try and create sensible names from uname -a output
sub getinfo
{
	local(@info);
	local($name);
	local($mhz);

D 3
	($mhz = $_[1]) =~ s/[\. ].*//;
	@info = split(/\s+/, $_[0]);
E 3
I 3
	$mhz = $_[1];
	$_ = $_[0];
	@info = split;
E 3
	$name = pop(@info);
	chop($name);
I 3
	if ($name eq "unknown") {
		$name = pop(@info);
	}
E 3
	if ($name eq "mips") {
D 3
		$name = "$info[$#info]@$mhz";
E 3
I 3
		$name = "$info[$#info]\@$mhz";
E 3
	} elsif ($_[0] =~ /HP-UX/) {
D 3
		$name = "$info[7]@$mhz";
E 3
I 3
		$name = "$info[7]\@$mhz";
E 3
	} elsif ($_[0] =~ /SunOS/) {
D 3
		$name = "$info[7]@$mhz";
E 3
I 3
		$name = "$info[7]\@$mhz";
E 3
	} else {
D 3
		$name .= "@$mhz";
E 3
I 3
		$name .= "\@$mhz";
E 3
	}
D 3
	push(@info, $name);
	@info;
E 3
I 3
	"$info[3] $name";
E 3
}
E 2
I 1
E 1
