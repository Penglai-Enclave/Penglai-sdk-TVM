h43783
s 00000/00000/00400
d D 1.9 00/01/31 15:29:41 lm 10 9
c Change mode to -rwxrwxr-x
cC
cK06814
cO-rwxrwxr-x
cZ-08:00
e
s 00002/00001/00398
d D 1.8 97/07/12 18:08:03 lm 9 8
c new naming mecahnism
cC
cK14492
e
s 00002/00001/00397
d D 1.7 96/05/21 23:11:37 lm 8 7
c perl5.
cK10965
cZ-07:00
e
s 00001/00000/00397
d D 1.6 96/01/22 23:23:27 lm 7 6
c clean off revision numbers.
cK10155
e
s 00001/00001/00396
d D 1.5 95/10/31 14:12:36 lm 6 5
c *** empty log message ***
cK08745
e
s 00020/00011/00377
d D 1.4 95/10/31 14:08:27 lm 5 4
c Some stuff for hpux.
c Check all arrays for valid data.
c Remove TLB info.
cK08687
cZ-08:00
e
s 00044/00119/00344
d D 1.3 95/10/25 14:56:09 lm 4 3
c catching bad data formats
cK45939
cZ-07:00
e
s 00060/00003/00403
d D 1.2 95/03/10 18:55:07 lm 3 2
c Check for legit values in stuff that can be smaller than 8MB.
cK57598
e
s 00406/00000/00000
d D 1.1 94/11/22 23:16:48 lm 2 1
c Initial revision
cK39435
e
s 00000/00000/00000
d D 1.0 94/11/22 23:16:47 lm 1 0
cBlm@lm.bitmover.com|ChangeSet|20000131225335|47351|--LMBENCH--
cHlm.bitmover.com
cK04473
cPscripts/getpercent
cR6f25a175673b6b6a
cV4
cX0x23
cZ-08:00
e
u
U
f e 0
f x 0x23
t
lmbench1.0 release
T
I 2

# Generate an ascii percentage summary from lmbench result files.
# Usage: getpercent file file file...
#
# Hacked into existence by Larry McVoy (lm@sun.com now lm@sgi.com).
# Copyright (c) 1994 Larry McVoy.  GPLed software.
# $Id$
D 8
eval "exec perl -Ss $0 $*"
E 8
I 8
eval 'exec perl -Ssw $0 "$@"'
E 8
	if 0;

I 5
$n = 0;	# apparently, hpux doesn't init to 0????

E 5
foreach $file (@ARGV) {
	push(@files, $file);
	open(FD, $file) || die "$0: can't open $file";
D 9
	$file =~ s|.*/||;
E 9
I 9
	$file =~ s|/|-|;
E 9
I 7
	$file =~ s/\.\d+//;
E 7
	push(@file, $file);
	while (<FD>) {
		chop;
I 9
		next if m|scripts/lmbench: /dev/tty|;
E 9
		if (/^\[lmbench/) {
			split;
			push(@uname, "@_");
		}
		if (/Mhz/) {
			split;
			push(@misc_mhz, $_[0]);
		}
		if (/^Null syscall:/) {
			split;
			push(@lat_nullsys, $_[2]);
		}
		if (/^Pipe latency:/) {
			split;
			push(@lat_pipe, $_[2]);
		}
		if (/UDP latency using localhost:/) {
			split;
			push(@lat_udp_local, $_[4]);
		}
		if (/TCP latency using localhost/) {
			split;
			push(@lat_tcp_local, $_[4]);
		}
		if (/RPC.udp latency using localhost/) {
			split;
			push(@lat_rpc_udp_local, $_[4]);
		}
		if (/RPC.tcp latency using localhost/) {
			split;
			push(@lat_rpc_tcp_local, $_[4]);
		}
		if (/^Process fork.exit/) {
			split;
			push(@lat_nullproc, $_[2]);
		}
D 6
		if (/^Process fork.execve/) {
E 6
I 6
		if (/^Process fork.execve:/) {
E 6
			split;
			push(@lat_simpleproc, $_[2]);
		}
		if (/^Process fork..bin.sh/) {
			split;
			push(@lat_shproc, $_[3]);
		}
		if (/size=0 ovr=/) {
			while (<FD>) {
				next unless /^2/;
				split;
				push(@lat_ctx, $_[1]);
			    	last;
			}
			while (<FD>) {
				next unless /^8/;
				split;
				push(@lat_ctx8, $_[1]);
			    	last;
			}
		}
		if (/^Pipe bandwidth/) {
			split;
			push(@bw_pipe, $_[2]);
		}
		if (/^Socket bandwidth using localhost/) {
			split;
			push(@bw_tcp_local, $_[4]);
		}
		if (/^File .* write bandwidth/) {
			split;
			$bw = sprintf("%.2f", $_[4] / 1024.);
			push(@bw_file, $bw);
		}
		if (/^"mappings/) {
D 4
			$done = 0;
			while (<FD>) {
				last if /^\s*$/;
				$save = $_ if /^\d\./;
				next unless /^8.00/;
				split;
				push(@lat_mappings, $_[1]);
				$done++;
			    	last;
			}
			unless ($done) {
				$_ = $save;
				split;
				push(@lat_mappings, $_[1]);
				warn "$file: No 8MB found for " .
				    "memory mapping timing, using $_[0]\n";
			}
E 4
I 4
			$value = &getbiggest("memory mapping timing");
			push(@lat_mappings, $value);
E 4
		}
		if (/^"read bandwidth/) {
D 4
			$done = 0;
			while (<FD>) {
				last if /^\s*$/;
				$save = $_ if /^\d\./;
				next unless /^8.00/;
				split;
				push(@bw_reread, $_[1]);
				$done++;
			    	last;
			}
			unless ($done) {
				$_ = $save;
				split;
				push(@bw_reread, $_[1]);
				warn "$file: No 8MB found for " .
				    "reread timing, using $_[0]\n";
			}
E 4
I 4
			$value = &getbiggest("reread timing");
			push(@bw_reread, $value);
E 4
		}
		if (/^"Mmap read bandwidth/) {
D 4
			$done = 0;
			while (<FD>) {
				last if /^\s*$/;
				$save = $_ if /^\d\./;
				next unless /^8.00/;
				split;
				push(@bw_mmap, $_[1]);
				$done++;
			    	last;
			}
			unless ($done) {
				$_ = $save;
				split;
				push(@bw_mmap, $_[1]);
				warn "$file: No 8MB found for " .
				    "mmap reread timing, using $_[0]\n";
			}
E 4
I 4
			$value = &getbiggest("mmap reread timing");
			push(@bw_mmap, $value);
E 4
		}
		if (/^"libc bcopy unaligned/) {
I 3
D 4
			$done = 0;
E 3
			while (<FD>) {
I 3
				last if /^\s*$/;
				$save = $_ if /^\d\./;
E 3
				next unless /^8.00/;
				split;
				push(@bw_bcopy_libc, $_[1]);
I 3
				$done++;
E 3
			    	last;
			}
I 3
			unless ($done) {
				$_ = $save;
				split;
				push(@bw_bcopy_libc, $_[1]);
				warn "$file: No 8MB found for " .
				    "libc bcopy timing, using $_[0]\n";
			}
E 4
I 4
			$value = &getbiggest("libc bcopy timing");
			push(@bw_bcopy_libc, $value);
E 4
E 3
		}
		if (/^"unrolled bcopy unaligned/) {
I 3
D 4
			$done = 0;
E 3
			while (<FD>) {
I 3
				last if /^\s*$/;
				$save = $_ if /^\d\./;
E 3
				next unless /^8.00/;
				split;
				push(@bw_bcopy_unrolled, $_[1]);
I 3
				$done++;
E 3
			    	last;
			}
I 3
			unless ($done) {
				$_ = $save;
				split;
				push(@bw_bcopy_unrolled, $_[1]);
				warn "$file: No 8MB found for " .
				    "unrolled bcopy timing, using $_[0]\n";
			}
E 4
I 4
			$value = &getbiggest("unrolled bcopy timing");
			push(@bw_bcopy_unrolled, $value);
E 4
E 3
		}
		if (/^Memory read/) {
I 3
D 4
			$done = 0;
E 3
			while (<FD>) {
I 3
				last if /^\s*$/;
				$save = $_ if /^\d\./;
E 3
				next unless /^8.00/;
				split;
				push(@bw_mem_rdsum, $_[1]);
I 3
				$done++;
E 3
			    	last;
			}
I 3
			unless ($done) {
				$_ = $save;
				split;
				push(@bw_mem_rdsum, $_[1]);
				warn "$file: No 8MB found for " .
				    "memory read & sum timing, using $_[0]\n";
			}
E 4
I 4
			$value = &getbiggest("memory read & sum timing");
			push(@bw_mem_rdsum, $value);
E 4
E 3
		}
		if (/^Memory write/) {
I 3
D 4
			$done = 0;
E 3
			while (<FD>) {
I 3
				last if /^\s*$/;
				$save = $_ if /^\d\./;
E 3
				next unless /^8.00/;
				split;
				push(@bw_mem_wr, $_[1]);
I 3
				$done++;
E 3
			    	last;
			}
I 3
			unless ($done) {
				$_ = $save;
				split;
				push(@bw_mem_wr, $_[1]);
				warn "$file: No 8MB found for " .
				    "memory write timing, using $_[0]\n";
			}
E 4
I 4
			$value = &getbiggest("memory write timing");
			push(@bw_mem_wr, $value);
E 4
E 3
		}
		if (/^"stride=128/) {
I 3
			$save = -1;
E 3
			while (<FD>) {
				if (/^0.00098\s/) {
					split;
					push(@lat_l1, $_[1]);
				} elsif (/^0.12500\s/) {
					split;
					push(@lat_l2, $_[1]);
D 3
				} elsif (/^8.00000\s/) {
E 3
I 3
				} elsif (/^[45678].00000\s/) {
E 3
					split;
D 3
					push(@lat_mem, $_[1]);
E 3
I 3
					$size = $_[0];
					$save = $_[1];
					last if /^8.00000\s/;
				} elsif (/^\s*$/) {
E 3
					last;
				}
			}
I 3
			if (!/^8/) {
				warn "$file: No 8MB memory latency, using $size\n";
			}
			push(@lat_mem, $save);
E 3
		}
		if (/^"stride=8192/) {	# XXX assumes <= 8K pagesize
			$tbl = -1;
			while (<FD>) {
D 3
				if (/^8.00000\s/) {
E 3
I 3
				if (/^[45678].00000\s/) {
E 3
					split;
					$tlb = $_[1];
I 3
					$size = $_[0];
					last if /^8.00000\s/;
E 3
				}
			}
I 3
			if (!/^8/) {
				warn "$file: No 8MB tlb latency, using $size\n";
			}
E 3
			push(@lat_tlb, $tlb);
		}
	}
D 5
	foreach $array ('lat_tlb', 'lat_mem', 'lat_l1', 'lat_l2') {
		eval "if (\$#$array != $i) {
E 5
I 5
	foreach $array (
		'misc_mhz', 'lat_nullsys', 'lat_pipe', 'lat_udp_local',
		'lat_tcp_local', 'lat_rpc_udp_local',
		'lat_rpc_tcp_local', 'lat_nullproc', 'lat_simpleproc',
		'lat_ctx', 'lat_ctx8', 'bw_pipe', 'bw_tcp_local',
		'bw_file', 'lat_mappings', 'bw_reread', 'bw_mmap',
		'bw_bcopy_libc', 'bw_bcopy_unrolled', 'bw_mem_rdsum',
		'bw_mem_wr', 'lat_l1', 'lat_l2', 'lat_mem', 'lat_tlb',
	) {
		eval "if (\$#$array != $n) {
E 5
			warn \"No data for $array in $file\n\";
			push(\@$array, -1);
		    }";
	}
D 5
	$i++;
E 5
I 5
	$n++;
E 5
}
I 8
exit 0;
E 8

I 4
# Input looks like
# "benchmark name
# size value
# ....
# <blank line>
#
# Return the biggest vvalue before the blank line.
sub getbiggest
{
	local($msg) = @_;
E 4

I 4
	undef $save;
	$value = 0;
	while (<FD>) {
		last if /^\s*$/;
		$save = $_ if /^\d\./;
	}
	if (defined $save) {
		$_ = $save;
		@d = split;
		$value = $d[1];
		if (int($d[0]) < 8) {
			warn "$file: using $d[0] size for $msg\n";
		}
	} else {
		warn "$file: no data for $msg\n";
	}
	$value;
}


E 4
print<<EOF;

                L M B E N C H  1 . 0   S U M M A R Y
                ------------------------------------

                  Comparison to best of the breed
                  -------------------------------

		(Best numbers are starred, i.e., *123)


        Processor, Processes - factor slower than the best
        --------------------------------------------------
Host                 OS  Mhz    Null    Null  Simple /bin/sh Mmap 2-proc 8-proc
                             Syscall Process Process Process  lat  ctxsw  ctxsw
--------- ------------- ---- ------- ------- ------- ------- ---- ------ ------
EOF

for ($i = 0; $i <= $#uname; $i++) {
        printf "%-9.9s %13.13s ", $file[$i], &getos($uname[$i]);
            printf "%4.0f %7s %7s %7s %7s %4s %6s %6s\n",
            $misc_mhz[$i],
            &smaller(@lat_nullsys, $i, 0),
            &smaller(@lat_nullproc, $i, 1024),
            &smaller(@lat_simpleproc, $i, 1024),
            &smaller(@lat_shproc, $i, 1024),
            &smaller(@lat_mappings, $i, 0),
            &smaller(@lat_ctx, $i, 0),
            &smaller(@lat_ctx8, $i, 0);

}

print<<EOF;

        *Local* Communication latencies - factor slower than the best
        -------------------------------------------------------------
Host                 OS  Pipe       UDP    RPC/     TCP    RPC/
                                            UDP             TCP
--------- ------------- ------- ------- ------- ------- -------
EOF

for ($i = 0; $i <= $#uname; $i++) {
        printf "%-9.9s %13.13s ", $file[$i], &getos($uname[$i]);
        printf "%7s %7s %7s %7s %7s\n",
            &smaller(@lat_pipe, $i, 0),
            &smaller(@lat_udp_local, $i, 0),
            &smaller(@lat_rpc_udp_local, $i, 0),
            &smaller(@lat_tcp_local, $i, 0),
            &smaller(@lat_rpc_tcp_local, $i, 0);

}

print<<EOF;

        *Local* Communication bandwidths - percentage of the best
        ---------------------------------------------------------
Host                 OS Pipe  TCP  File   Mmap  Bcopy  Bcopy  Mem   Mem
                                  reread reread (libc) (hand) read write
--------- ------------- ---- ---- ------ ------ ------ ------ ---- -----
EOF

for ($i = 0; $i <= $#uname; $i++) {
        printf "%-9.9s %13.13s ", $file[$i], &getos($uname[$i]);
        printf "%4s %4s %6s %6s %6s %6s %4s %5s\n",
            &bigger(@bw_pipe, $i),
            &bigger(@bw_tcp_local, $i),
            &bigger(@bw_reread, $i),
            &bigger(@bw_mmap, $i),
            &bigger(@bw_bcopy_libc, $i),
            &bigger(@bw_bcopy_unrolled, $i),
            &bigger(@bw_mem_rdsum, $i),
            &bigger(@bw_mem_wr, $i);
}

print<<EOF;

            Memory latencies in nanoseconds - factor slower than the best
		    (WARNING - may not be correct, check graphs)
            -------------------------------------------------------------
D 5
Host                 OS   Mhz  L1 \$   L2 \$    Main mem    TLB    Guesses
--------- -------------   ---  ----   ----    --------    ---    -------
E 5
I 5
Host                 OS   Mhz  L1 \$   L2 \$    Main mem    Guesses
--------- -------------   ---  ----   ----    --------    -------
E 5
EOF

for ($i = 0; $i <= $#uname; $i++) {
        printf "%-9.9s %13.13s   %3d",
	    $file[$i], &getos($uname[$i]), $misc_mhz[$i];
D 5
	if ($lat_l1[$i] <= 0) {
        	printf "%6s %6s %11s %6s    %s",
		    "-", "-", "-", "-",
E 5
I 5
	if ($lat_l1[$i] < 0) {
        	printf "%6s %6s %11s    %s",
		    "-", "-", "-",
E 5
		    "Bad mhz?";
	} else {
		$msg = &check_caches;
		if ($msg =~ /L1/) {
			$lat_l1[$i] = -1;
		} elsif ($msg =~ /L2/) {
			$lat_l2[$i] = -1;
		}
D 5
        	printf "%6s %6s %11s %6s",
E 5
I 5
        	printf "%6s %6s %11s",
E 5
		    &smaller(@lat_l1, $i, 0),
		    &smaller(@lat_l2, $i, 0), 
D 5
		    &smaller(@lat_mem, $i, 0),
		    &smaller(@lat_tlb, $i, 0);
E 5
I 5
		    &smaller(@lat_mem, $i, 0);
E 5
		if ($msg =~ /L/) {
			print "$msg";
		}
	}
	print "\n";
}


exit 0;

# Return factor of the smallest number.
sub smaller
{
        local(@values) = @_;
        local($which, $min, $i, $units);

        $units = pop(@values);
        $which = pop(@values);
        $min = 0x7fffffff;
        foreach $i (@values) {
		next if $i == -1 || $i == 0;
                $min = $i if ($min > $i);
        }
        if ($values[$which] == $min) {
                #"***";
		if ($units == 1024) {
			sprintf("*%.1fK", $values[$which]/1024.);
		} else {
			sprintf("*%d", $values[$which]);
		}
        } elsif ($values[$which] == -1) {
		"???";
        } elsif ($values[$which] == 0) {
		"???";
        } elsif ($values[$which] / $min < 10.0) {
                sprintf("%.1f", $values[$which] / $min);
        } else {
                sprintf("%.0f", $values[$which] / $min);
        }
}

# Return closeness to the largest number as a percentage.
# Exact match is 100%, smaller numbers are like 15%.
sub bigger
{
        local(@values) = @_;
        local($which, $max, $i);

        $which = pop(@values);
        $max = 0;
        foreach $i (@values) {
                $max = $i if ($max < $i);
        }
        if ($values[$which] == $max) {
                sprintf("*%d", $values[$which]);
        } else {
                sprintf("%d%%", $values[$which] / $max * 100);
        }
}

# Try and create sensible names from uname -a output
sub getos
{
        local(@info);

        @info = split(/\s+/, $_[0]);
        "$info[3] $info[5]";
}

# Return true if the values differe by less than 10%
sub same
{
	local($a, $b) = @_;

	if ($a > $b) {
		$percent = (($a - $b) / $a) * 100;
	} else {
		$percent = (($b - $a) / $b) * 100;
	}
	return ($percent <= 20);
}

sub check_caches
{
	if (!&same($lat_l1[$i], $lat_l2[$i]) &&
	    &same($lat_l2[$i], $lat_mem[$i])) {
		"    No L2 cache?";
	} elsif (&same($lat_l1[$i], $lat_l2[$i])) {
		"    No L1 cache?";
	} 
}
E 2
I 1
E 1
