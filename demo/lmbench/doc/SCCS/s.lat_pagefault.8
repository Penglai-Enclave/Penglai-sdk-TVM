h02970
s 00013/00000/00033
d D 1.2 00/10/16 17:13:45 staelin 3 2
c - Update man pages to match current status
cC
cHhpli8.hpli.hpl.hp.com
cK34848
cZ+02:00
e
s 00033/00000/00000
d D 1.1 94/11/23 18:05:33 lm 2 1
c Initial revision
cC
cK20441
e
s 00000/00000/00000
d D 1.0 94/11/23 18:05:32 lm 1 0
cBlm@lm.bitmover.com|ChangeSet|20000131225335|47351|--LMBENCH--
cHlm.bitmover.com
cK04402
cPdoc/lat_pagefault.8
cR7d20eeb85f9f1645
cV4
cX0x23
cZ-08:00
e
u
U
f e 0
f x 0x23
t
lmbench.
T
I 2
.\" $Id$
.TH LAT_PAGEFAULT 8 "$Date$" "(c)1994 Larry McVoy" "LMBENCH"
.SH NAME
lat_pagefault \- measure the cost of pagefaulting pages from a file
.SH SYNOPSIS
.B lat_pagefault
I 3
[
.I "-P <parallelism>"
]
[
.I "-W <warmups>"
]
[
.I "-N <repetitions>"
]
E 3
.I file
[
.I file....
]
.SH DESCRIPTION
.B lat_pagefault
times how fast a page of a file can be faulted in.  The file is flushed from 
(local) memory by using the \f(CBmsync()\fP interface with the invalidate
flag set.  (Note that NFS does not send this over the wire so this makes
for a handy way to measure the cost of going across the wire.)
.LP
The benchmark maps in the entire file and the access pages backwards using
a stride of 256K kilobytes.
.SH OUTPUT
Output format is below; it prints the average cost of page faulting a page.
.sp
.ft CB
Pagefaults on <file>: <d> usecs
.ft
.SH BUGS
Using a stride of 256K may be a bad idea because SCSI controllers
may have caches bigger than that.
.SH ACKNOWLEDGEMENT
Funding for the development of
this tool was provided by Sun Microsystems Computer Corporation.
.SH "SEE ALSO"
lmbench(8).
I 3
.SH "AUTHOR"
Carl Staelin and Larry McVoy
.PP
Comments, suggestions, and bug reports are always welcome.
E 3
E 2
I 1
E 1
